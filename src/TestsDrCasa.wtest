import Persona.*
import Medico.*
import PersonalDeSalud.*
import JefeDeDepartamento.*
import Enfermedades.*
import TiposDeEnf.*

/* 
describe "Temporada 1" {
	var logan
	var frank
	var malaria
	var malariaFuerte
	var otitis
	var lupus
	
	method initialize(){
		malaria = new EnfermedadInfecciosa(
			celulasQueAmenaza = 500
		)
		malariaFuerte = new EnfermedadInfecciosa(
			celulasQueAmenaza = 800
		)
		otitis = new EnfermedadInfecciosa(
			celulasQueAmenaza = 100
		)
		lupus = new EnfermedadAutoinmune(
			celulasQueAmenaza = 10000
		)
		logan = new Persona(
			celulasTotales = 3000000,
			enfermedades = #{malaria, otitis, lupus}
		)
		frank = new Persona(
			celulasTotales = 3500000
		)
	}
	
	test "1- se nos enfermo Frank Fabra" {
		frank.contraerEnfermedad(malariaFuerte)
		assert.that(frank.tiene(malariaFuerte))
	}
	
	test "2- La malaria comun se reproduce" {
		malaria.reproducirse()
		assert.equals(1000, malaria.celulasQueAmenaza())
	}
	
	test "3- Logan sobrevive un dia y se verifica la enfermedadMasAmenazante, si estaEnComa y el total de Celulas Afectadas por Enfermedades Agresivas" {
		logan.vivirUnDia()
		assert.equals(lupus, logan.enfermedadMasAmenazante())
		assert.equals(false, logan.estaEnComa())
		assert.equals(0, logan.totalCelulasAfectadasPorAgresivas())
	}
	
	test "4- Logan pasa 31 dias con sus enfermedades" {
		31.times{i => logan.vivirUnDia()}
		assert.equals(lupus, logan.enfermedadMasAmenazante())
		assert.equals(true, logan.estaEnComa())
		assert.equals(10000, logan.totalCelulasAfectadasPorAgresivas())
	}
	
	test "- Cantidad de celulas despues de vivir un dia"{
		logan.vivirUnDia()
		assert.equals(2990000, logan.celulasTotales())
	}
	
	test "- Cantidad de celulas despues de vivir 2 dias"{
		2.times{i => logan.vivirUnDia()}
		assert.equals(2980000, logan.celulasTotales())
	}
	
	test "- Despues de vivir 14 dias"{
		14.times{i => logan.vivirUnDia()}
		assert.equals(2860000, logan.celulasTotales())
		assert.equals(44.4, logan.temperaturaCorporal())
	}
	
	test "- No puedo superar los 45 grados" {
		frank.sumarTemperatura(16)
		logan.sumarTemperatura(16)
		assert.equals(45, frank.temperaturaCorporal())
		assert.equals(45, logan.temperaturaCorporal())
	}
	
	test "- 31 dias de Logan usando totalCelulasAfectadasPorAgresivas" {
		31.times{i => logan.vivirUnDia()}
		assert.equals(lupus, logan.enfermedadMasAmenazante())
		assert.equals(true, logan.estaEnComa())
		assert.equals(10000, logan.totalCelulasAfectadasPorAgresivas())
	}
	
	test "Malaria gigante para frank" {
		frank.contraerEnfermedad(malariaFuerte)
		9.times{i => malariaFuerte.reproducirse()}
		assert.equals(409600, malariaFuerte.celulasQueAmenaza())
		assert.that(malariaFuerte.esAgresiva(frank))
		assert.equals(#{malariaFuerte}, frank.agresivas())
		assert.equals(409600, frank.totalCelulasAfectadasPorAgresivas())
	}
}

describe "Temporada 2" {
	var logan
	var cameron
	var house
	var malaria500
	var lupus
	var otitis
	
	method initialize(){
		lupus = new EnfermedadAutoinmune(celulasQueAmenaza = 10000)
        otitis = new EnfermedadInfecciosa(celulasQueAmenaza = 100)
        malaria500 = new EnfermedadInfecciosa(celulasQueAmenaza = 500)

		logan = new Persona(celulasTotales = 3000000)
		cameron = new Medico(dosis = 10)
		house = new JefeDeDepartamento(celulasTotales = 3000000, temperaturaCorporal = 36)
		
		logan.contraerEnfermedad(lupus)
        logan.contraerEnfermedad(otitis)
        logan.contraerEnfermedad(malaria500)
		
		house.subordinarA(cameron)	
	}
	
	test "1- La malaria se atenua en 100 celulas" {
		malaria500.atenuarseEn(100)
		assert.equals(400, malaria500.celulasQueAmenaza())
	}
	
	test "1- El lupus se atenua en 500" {
		lupus.atenuarseEn(500)
		assert.equals(9500, lupus.celulasQueAmenaza())
	}
	
	test "2- Cameron atiende a Logan" {
		cameron.atenderA(logan)
		assert.notThat(logan.tiene(otitis))
	}
	
	test "3- House atiende a Logan y lo cura de otitis" {
		house.atenderA(logan)
		assert.notThat(logan.tiene(otitis))
	}
	
	test "3- House atiende a Logan y le atenua la malaria" {
		house.atenderA(logan)
		assert.equals(350, malaria500.celulasQueAmenaza())
	}
	
	test "3- House atiende a Logan y le atenua el lupus" {
		house.atenderA(logan)
		assert.equals(9850, lupus.celulasQueAmenaza())
	}
	
	test "4- Cameron contrae malaria y trata de curarse" {
		cameron.contraerEnfermedad(malaria500)
		assert.equals(350, malaria500.celulasQueAmenaza())
	}
	
	test "4- House contrae malaria y trata de curarse" {
		house.contraerEnfermedad(malaria500)
		assert.equals(350, malaria500.celulasQueAmenaza())
	}
	
	test "5- House contrae la muerte y sufre su efecto al vivir 1 dia"{
		house.contraerEnfermedad(muerte)
		house.vivirUnDia()
		assert.equals(0, house.temperaturaCorporal())
	}
}
*/
describe "Temporada 3" {
	var logan
	var cameron
	var house
	var foreman
	
	method initialize() {
		logan = new Persona(celulasTotales = 3000000)
		cameron = new Medico(dosis = 10)
		house = new JefeDeDepartamento(celulasTotales = 3000000, temperaturaCorporal = 36)
	}
	
	test "1- Cameron intenta donar a House, 1100 celulas" {
		assert.throwsExceptionWithMessage("No se pudo donar", {cameron.intentarDonarA(house, 1100)})
	}
	
	test "1- Mismo test, Mensaje especifico" {
		assert.throwsExceptionWithMessage("No son compatibles", {cameron.intentarDonarA(house, 1100)})}
	
//	test "?"{
//		assert.equals(3001100, house.celulasTotales())
//		assert.equals(2998900, cameron.celulasTotales())
//	}
	
}


